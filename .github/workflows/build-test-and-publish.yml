name: Build

on:
  push:
    branches:
      - master
      - DEV-100_deployment-on-aws
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Elixir project

    steps:
      - uses: actions/checkout@v2

      - name: Set version number
        id: version
        uses: DEalog/version-action@v0.1.0
        with:
          fallback-prefix: "1.0.0-SNAPSHOT-"

      - name: Use cached node_modules
        id: cache
        uses: actions/cache@v1
        with:
          path: ./assets/node_modules
          key: nodeModules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            nodeModules-
      
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14'

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd ./assets
          yarn install
          yarn deploy
          yarn dump

      - name: Cache local Elixir cache
        uses: actions/cache@v2
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Use Elixir
        uses: actions/setup-elixir@v1
        with:
          elixir-version: "1.10.4"
          otp-version: "23.0.2"

      - name: Install and compile dependencies
        run: mix do deps.get, deps.compile
        env:
          MIX_ENV: prod

      - name: Digests and compresses static files
        run: mix phx.digest
        env:
          MIX_ENV: prod

      - name: Compile and release application
        run: mix do compile, release
        env:
          MIX_ENV: prod
      
      - name: Create artifact
        uses: actions/upload-artifact@v2
        with:
          name: backoffice
          path: |
            ./_build/prod/rel/backoffice
            ./CHANGELOG.md
            ./Dockerfile
            ./rel/run.sh
            ./version.txt
  
  test:
    runs-on: ubuntu-latest
    name: Test Elixir project

    needs: [ build ]

    services:
      db:
        image: postgres:12.1-alpine
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      - name: Set up Elixir
        uses: actions/setup-elixir@v1
        with:
          elixir-version: "1.10.4"
          otp-version: "23.0.2"

      - name: Restore dependencies cache
        uses: actions/cache@v2
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Compile application
        run: mix compile
        env:
          MIX_ENV: test

      - name: Setup event store
        run: mix do event_store.create, event_store.init
        env:
          MIX_ENV: test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost

      - name: Run tests
        run: mix test
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost

  publish:
    runs-on: ubuntu-latest
    name: Dockerize and publish
    needs: [ build, test ]

    steps:
    - name: Fetch artifact
      uses: actions/download-artifact@v2
      with:
        name: backoffice

    - name: Set env
      run: |
        echo ::set-env name=VERSION::$(cat ./version.txt)
        echo ::set-env name=IMAGE_REPO::backoffice
        echo ::set-env name=AWS_REGION::eu-central-1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      id: docker-build
      uses: whoan/docker-build-with-cache-action@v5
      with:
        username: "${{ secrets.AWS_ACCESS_KEY_ID }}"
        password: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        image_name: ${{ env.IMAGE_REPO }}
        image_tag: ${{ env.VERSION }}
        registry: ${{ steps.login-ecr.outputs.registry }}
        dockerfile: ./Dockerfile
    
    - name: Store docker image name
      run: echo ${{ steps.docker-build.outputs.FULL_IMAGE_NAME }} >> ./full_image_name.txt

    - name: Create artifact
      uses: actions/upload-artifact@v2
      with:
        name: dockerized-backoffice
        path: |
          ./full_image_name.txt